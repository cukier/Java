/*http://jamod.sourceforge.net/kb/serial_master_howto.html*/

package cuki.bin;

import net.wimpi.modbus.ModbusException;
import net.wimpi.modbus.ModbusIOException;
import net.wimpi.modbus.ModbusSlaveException;
import net.wimpi.modbus.io.ModbusSerialTransaction;
import net.wimpi.modbus.msg.ReadInputRegistersRequest;
import net.wimpi.modbus.msg.ReadInputRegistersResponse;
import net.wimpi.modbus.net.SerialConnection;
import net.wimpi.modbus.util.SerialParameters;

public class SerialMaster {

	public static void main(String[] args) {

		/* The important instances of the classes mentioned before */
		SerialConnection con = null; // the connection
		ModbusSerialTransaction trans = null; // the transaction
		ReadInputRegistersRequest req = null; // the request
		ReadInputRegistersResponse res = null; // the response

		/* Variables for storing the parameters */
		String portname = null; // the name of the serial port to be used
		int unitid = 0; // the unit identifier we will be talking to
		int ref = 0; // the reference, where to start reading from
		int count = 0; // the count of IR's to read
		int repeat = 1; // a loop for repeating the transaction

		// 1. Setup the parameters
		portname = "COM8";
		unitid = 1;
		ref = 40000;
		count = 100;
		repeat = 4;

		// 2. Set master identifier
		// ModbusCoupler.createModbusCoupler(null);
		// ModbusCoupler.ModbusCoupler.getReference().setUnitID(1);

		// 3. Setup serial parameters
		SerialParameters params = new SerialParameters();
		params.setPortName(portname);
		params.setBaudRate(9600);
		params.setDatabits(8);
		params.setParity("None");
		params.setStopbits(1);
		params.setEncoding("rtu");
		params.setEcho(false);

		// 4. Open the connection
		con = new SerialConnection(params);
		try {
			con.open();
		} catch (Exception e) {
			e.printStackTrace();
		}

		// 5. Prepare a request
		req = new ReadInputRegistersRequest(ref, count);
		req.setUnitID(unitid);
		req.setHeadless();

		// 6. Prepare a transaction
		trans = new ModbusSerialTransaction(con);
		trans.setRequest(req);

		// 7. Execute the transaction repeat times
		int k = 0;
		do {
			try {
				trans.execute();
			} catch (ModbusIOException e) {
				e.printStackTrace();
			} catch (ModbusSlaveException e) {
				e.printStackTrace();
			} catch (ModbusException e) {
				e.printStackTrace();
			}
			res = (ReadInputRegistersResponse) trans.getResponse();
			for (int n = 0; n < res.getWordCount(); n++) {
				System.out.println("Word " + n + "=" + res.getRegisterValue(n));
			}
			k++;
		} while (k < repeat);

		// 8. Close the connection
		con.close();

	}

}
