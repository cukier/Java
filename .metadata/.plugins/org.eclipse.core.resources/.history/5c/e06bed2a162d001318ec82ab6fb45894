/*

package cuki;

import java.applet.Applet;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;

import javafish.clients.opc.JOpc;
import javafish.clients.opc.component.OpcGroup;
import javafish.clients.opc.component.OpcItem;
import javafish.clients.opc.exception.ConnectivityException;
import javafish.clients.opc.exception.UnableAddGroupException;
import javafish.clients.opc.exception.UnableAddItemException;

@SuppressWarnings("serial")
public class Pivo extends Applet implements Runnable {

	private volatile Thread timer;
	private int diam = 300;
	private Dimension windowSize = new Dimension(diam + 20, diam + 20);
	private Ellipse2D aro = new Ellipse2D.Double(
			(windowSize.getWidth() - diam) / 2,
			(windowSize.getHeight() - diam) / 2, diam, diam);
	private Point2D origem = new Point2D.Double(0, 0);
	private Point2D dest = new Point2D.Double(0, 0);
	private Point2D centro = new Point2D.Double(aro.getCenterX(),
			aro.getCenterY());
	private Line2D linha = new Line2D.Double(origem, centro);
	private double x = 0D;
	private double y = 0D;
	private int angulo = 0;
	private static JOpc jopc;
	private static OpcItem item1;
	private static OpcGroup group;

	public void init() {
		setSize(windowSize);

		JOpc.coInitialize();
		jopc = new JOpc("localhost", "Atos.OPCConnect.1", "JOPC1");

		item1 = new OpcItem("Equipamento1.anguloAtual", true, "");
		group = new OpcGroup("group1", true, 500, 0.0f);

		group.addItem(item1);
		jopc.addGroup(group);

		try {
			jopc.connect();
		} catch (ConnectivityException e2) {
			e2.printStackTrace();
		}

		try {
			jopc.registerGroups();
			System.out.println("OPCGroup are registered...");
		} catch (UnableAddGroupException e2) {
			e2.printStackTrace();
		} catch (UnableAddItemException e2) {
			e2.printStackTrace();
		}
	}

	public void update(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;

		g2.setColor(getBackground());
		g2.draw(linha);

		if (angulo == 360)
			angulo = 0;

		x = Math.cos(angulo  Math.PI / 180 - Math.PI / 2)  diam / 2
				+ centro.getX();
		y = Math.sin(angulo  Math.PI / 180 - Math.PI / 2)  diam / 2
				+ centro.getY();

		dest.setLocation(x, y);

		linha.setLine(centro, dest);
		g2.setColor(Color.BLACK);
		g2.draw(linha);
	}

	public void paint(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;

		g2.draw(aro);
	}

	public void start() {
		timer = new Thread(this);
		timer.start();
	}

	public void stop() {
		timer = null;
	}

	public void run() {
		Thread me = Thread.currentThread();
		while (timer == me) {
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
			}
			repaint();
		}
	}
}
 */

package cuki;

import javafish.clients.opc.JOpc;
import javafish.clients.opc.component.OpcGroup;
import javafish.clients.opc.component.OpcItem;
import javafish.clients.opc.exception.ComponentNotFoundException;
import javafish.clients.opc.exception.ConnectivityException;
import javafish.clients.opc.exception.SynchReadException;
import javafish.clients.opc.exception.UnableAddGroupException;
import javafish.clients.opc.exception.UnableAddItemException;
import javafish.clients.opc.variant.Variant;

public class Pivo {

	public static void main(String[] args) throws InterruptedException {
		Pivo test = new Pivo();

		JOpc.coInitialize();

		JOpc jopc = new JOpc("localhost", "Atos.OPCConnect.1", "JOPC1");

		OpcItem item1 = new OpcItem("Equipamento1.anguloAtual", true, "");
		OpcGroup group = new OpcGroup("group1", true, 500, 0.0f);

		group.addItem(item1);
		jopc.addGroup(group);

		try {
			jopc.connect();
		} catch (ConnectivityException e2) {
			e2.printStackTrace();
		}

		try {
			jopc.registerGroups();
			System.out.println("OPCGroup are registered...");
		} catch (UnableAddGroupException e2) {
			e2.printStackTrace();
		} catch (UnableAddItemException e2) {
			e2.printStackTrace();
		}

		synchronized (test) {
			test.wait(50);
		}

		// Synchronous reading of item
		int cycles = 7;
		int acycle = 0;
		while (acycle++ < cycles) {
			synchronized (test) {
				test.wait(1000);
			}

			try {
				OpcItem responseItem = jopc.synchReadItem(group, item1);
				System.out.println(responseItem);
				System.out.println(Variant.getVariantName(responseItem
						.getDataType()) + ": " + responseItem.getValue());
			} catch (ComponentNotFoundException e1) {
				e1.printStackTrace();
			} catch (SynchReadException e) {
				e.printStackTrace();
			}
		}
		JOpc.coUninitialize();
	}
}
